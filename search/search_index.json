{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"mkdocs-autorefs","text":"<p>Automatically link across pages in MkDocs.</p>"},{"location":"#installation","title":"Installation","text":"<p>With <code>pip</code>: <pre><code>python3 -m pip install mkdocs-autorefs\n</code></pre></p>"},{"location":"#usage","title":"Usage","text":"<pre><code># mkdocs.yml\nplugins:\n- search\n- autorefs\n</code></pre> <p>In one of your Markdown files (e.g. <code>doc1.md</code>) create some headings:</p> <pre><code>## Hello, world!\n\n## Another heading\n\nLink to [Hello, World!](#hello-world) on the same page.\n</code></pre> <p>This is a normal link to an anchor. MkDocs generates anchors for each heading, and they can always be used to link to something, either within the same page (as shown here) or by specifying the path of the other page.</p> <p>But with this plugin, you can link to a heading from any other page on the site without needing to know the path of either of the pages, just the heading title itself. Let's create another Markdown page to try this, <code>subdir/doc2.md</code>:</p> <pre><code>We can [link to that heading][hello-world] from another page too.\n\nThis works the same as [a normal link to that heading](../doc1.md#hello-world).\n</code></pre> <p>Linking to a heading without needing to know the destination page can be useful if specifying that path is cumbersome, e.g. when the pages have deeply nested paths, are far apart, or are moved around frequently. And the issue is somewhat exacerbated by the fact that MkDocs supports only relative links between pages.</p> <p>Note that this plugin's behavior is undefined when trying to link to a heading title that appears several times throughout the site. Currently it arbitrarily chooses one of the pages.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#050-2023-08-02","title":"0.5.0 - 2023-08-02","text":"<p>Compare with 0.4.1</p>"},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Drop support for Python 3.7</li> </ul>"},{"location":"changelog/#build","title":"Build","text":"<ul> <li>Migrate to pdm-backend (48b92fb by Micha\u0142 G\u00f3rny).</li> </ul>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Stop using deprecated <code>warning_filter</code> (7721103 by Kyle King). PR #30</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Use new MkDocs plugin logger if available (ca8d758 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#041-2022-03-07","title":"0.4.1 - 2022-03-07","text":"<p>Compare with 0.4.0</p>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Fix packaging (missing <code>__init__</code> module) (de0670b by Timoth\u00e9e Mazzucotelli). Issue #17, issue mkdocstrings/mkdocstrings#398, PR #18</li> </ul>"},{"location":"changelog/#040-2022-03-07","title":"0.4.0 - 2022-03-07","text":"<p>Compare with 0.3.1</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Add HTML classes to references: <code>autorefs</code> always, and <code>autorefs-internal</code> or <code>autorefs-external</code> depending on the link (39db59d by Timoth\u00e9e Mazzucotelli). PR #16</li> </ul>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Don't compute relative URLs of already relative ones (f6b861c by Timoth\u00e9e Mazzucotelli). PR #15</li> </ul>"},{"location":"changelog/#031-2021-12-27","title":"0.3.1 - 2021-12-27","text":"<p>Compare with 0.3.0</p>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Support fallback method returning multiple identifiers (0d2b411 by Timoth\u00e9e Mazzucotelli). Issue #11, PR #12 and mkdocstrings#350</li> </ul>"},{"location":"changelog/#030-2021-07-24","title":"0.3.0 - 2021-07-24","text":"<p>Compare with 0.2.1</p>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Add optional-hover ref type (0288bdd by Brian Koropoff). PR #10</li> </ul>"},{"location":"changelog/#021-2021-05-07","title":"0.2.1 - 2021-05-07","text":"<p>Compare with 0.2.0</p>"},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Prevent error during parallel installations (c90e399 by Timoth\u00e9e Mazzucotelli). PR #9</li> </ul>"},{"location":"changelog/#020-2021-05-03","title":"0.2.0 - 2021-05-03","text":"<p>Compare with 0.1.1</p>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Allow registering absolute URLs for autorefs (621686b by Oleh Prypin). PR #8</li> <li>Allow external tools to insert references that are OK to skip (7619c28 by Oleh Prypin). PR #7</li> <li>Allow <code>[``identifier``][]</code>, understood as <code>[``identifier``][identifier]</code> (2d3182d by Oleh Prypin). PR #5</li> </ul>"},{"location":"changelog/#011-2021-02-28","title":"0.1.1 - 2021-02-28","text":"<p>Compare with 0.1.0</p>"},{"location":"changelog/#packaging","title":"Packaging","text":"<ul> <li>Remove unused dependencies (9c6a8e6 by Oleh Prypin).</li> </ul>"},{"location":"changelog/#010-2021-02-17","title":"0.1.0 - 2021-02-17","text":"<p>Compare with first commit</p>"},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Split out \"mkdocs-autorefs\" plugin from \"mkdocstrings\" (fe6faa5 by Oleh Prypin).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at pawamoy@pm.me. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd mkdocs-autorefs\nmake setup\n</code></pre> <p>Note</p> <p> If it fails for some reason, you'll need to install PDM manually.</p> <p>You can install it with:</p> <pre><code>python3 -m pip install --user pipx\npipx install pdm\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>pdm install</code>.</p> <p>You now have the dependencies installed.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you run the task directly with <code>pdm run duty TASK</code>.</p> <p>The Makefile detects if a virtual environment is activated, so <code>make</code> will work the same with the virtualenv activated or not.</p> <p>If you work in VSCode, see examples of tasks and run configurations.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build mkdocs-autorefs. Thank you!</p> <p><code>python</code> | <code>pdm</code> | <code>copier-pdm</code></p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>click</code> Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.1.6</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>&gt;=0.4; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>importlib-metadata</code> Read metadata from Python packages <code>&gt;=4.4; python_version &lt; \"3.10\"</code> <code>6.8.0</code> ? <code>jinja2</code> A very fast and expressive template engine. <code>&gt;=2.11.1</code> <code>3.1.2</code> BSD-3-Clause <code>markdown</code> Python implementation of John Gruber's Markdown. <code>&gt;=3.3</code> <code>3.4.4</code> BSD License <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0.1</code> <code>2.1.3</code> BSD-3-Clause <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.1</code> <code>1.5.2</code> BSD License <code>packaging</code> Core utilities for Python packages <code>&gt;=20.5</code> <code>23.1</code> BSD License <code>pathspec</code> Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.11.1</code> <code>0.11.2</code> Mozilla Public License 2.0 (MPL 2.0) <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=2.2.0</code> <code>3.10.0</code> MIT License <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.8.2</code> Dual License <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.1</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>3.0.0</code> Apache License 2.0 <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.16.2</code> ?"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>ansimarkup</code> Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License <code>babel</code> Internationalization utilities <code>&gt;=2.10.3</code> <code>2.12.1</code> BSD <code>beautifulsoup4</code> Screen-scraping library <code>4.12.2</code> MIT License <code>black</code> The uncompromising code formatter. <code>&gt;=23.1</code> <code>23.7.0</code> MIT <code>blacken-docs</code> Run Black on Python code blocks in documentation files. <code>&gt;=1.13</code> <code>1.15.0</code> MIT <code>certifi</code> Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2023.7.22</code> MPL-2.0 <code>charset-normalizer</code> The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&lt;4,&gt;=2</code> <code>3.2.0</code> MIT <code>click</code> Composable command line interface toolkit <code>&gt;=8.0.0</code> <code>8.1.6</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>coverage</code> Code coverage measurement for Python <code>[toml]&gt;=5.2.1</code> <code>7.2.7</code> Apache-2.0 <code>csscompressor</code> A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD <code>cssselect</code> cssselect parses CSS3 Selectors and translates them to XPath 1.0 <code>&gt;=1.2.0</code> <code>1.2.0</code> BSD <code>dparse</code> A parser for Python dependency files <code>&gt;=0.6.2</code> <code>0.6.3</code> MIT license <code>duty</code> A simple task runner. <code>&gt;=0.10</code> <code>1.0.0</code> ISC <code>exceptiongroup</code> Backport of PEP 654 (exception groups) <code>&gt;=1.0.0rc8; python_version &lt; \"3.11\"</code> <code>1.1.2</code> ? <code>execnet</code> execnet: rapid multi-Python deployment <code>&gt;=1.1</code> <code>2.0.2</code> MIT License <code>failprint</code> Run a command, print its output only if it fails. <code>&gt;=0.11</code> <code>1.0.1</code> ISC <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>git-changelog</code> Automatic Changelog generator using Jinja2 templates. <code>&gt;=1.0</code> <code>2.0.0</code> ISC <code>gitdb</code> Git Object Database <code>&lt;5,&gt;=4.0.1</code> <code>4.0.10</code> BSD License <code>gitpython</code> GitPython is a Python library used to interact with Git repositories <code>3.1.32</code> BSD <code>griffe</code> Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.30</code> <code>0.32.3</code> ISC <code>htmlmin2</code> An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD <code>idna</code> Internationalized Domain Names in Applications (IDNA) <code>&lt;4,&gt;=2.5</code> <code>3.4</code> BSD License <code>importlib-metadata</code> Read metadata from Python packages <code>&gt;=4.3; python_version &lt; \"3.10\"</code> <code>6.8.0</code> ? <code>iniconfig</code> brain-dead simple config-ini parsing <code>2.0.0</code> MIT License <code>jinja2</code> A very fast and expressive template engine. <code>&lt;4,&gt;=2.11</code> <code>3.1.2</code> BSD-3-Clause <code>jsmin</code> JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License <code>lxml</code> Powerful and Pythonic XML processing library combining libxml2/libxslt with the ElementTree API. <code>&gt;=4.6</code> <code>4.9.3</code> BSD-3-Clause <code>markdown</code> Python implementation of John Gruber's Markdown. <code>&lt;4.0.0,&gt;=3.3.3</code> <code>3.4.4</code> BSD License <code>markdown-callouts</code> Markdown extension: a classier syntax for admonitions <code>&gt;=0.2</code> <code>0.3.0</code> MIT <code>markdown-exec</code> Utilities to execute code blocks in Markdown files. <code>&gt;=0.5</code> <code>1.6.0.1.0.1</code> ISC <code>markdown2</code> A fast and complete Python implementation of Markdown <code>&gt;=2.4.3</code> <code>2.4.10</code> MIT <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>2.1.3</code> BSD-3-Clause <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.5</code> <code>1.5.2</code> BSD License <code>mkdocs-coverage</code> MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=0.2</code> <code>1.0.0</code> ISC <code>mkdocs-gen-files</code> MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.3</code> <code>0.5.0</code> MIT License <code>mkdocs-git-committers-plugin-2</code> An MkDocs plugin to create a list of contributors on the page <code>&gt;=1.1</code> <code>1.1.2</code> MIT <code>mkdocs-literate-nav</code> MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;=0.4</code> <code>0.6.0</code> MIT License <code>mkdocs-material</code> Documentation that simply works <code>&gt;=7.3</code> <code>9.1.21+insiders.4.37.1</code> MIT License <code>mkdocs-material-extensions</code> Extension pack for Python Markdown and MkDocs Material. <code>&gt;=1.1</code> <code>1.1.1</code> MIT License <code>mkdocs-minify-plugin</code> An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.6.4</code> <code>0.7.1</code> MIT <code>mkdocstrings</code> Automatic documentation from sources, for MkDocs. <code>[python]&gt;=0.18</code> <code>0.22.0</code> ISC <code>mkdocstrings-python</code> A Python handler for mkdocstrings. <code>&gt;=0.5.2</code> <code>1.2.1.1.1.4</code> ISC <code>mypy</code> Optional static typing for Python <code>&gt;=0.910</code> <code>1.4.1</code> MIT License <code>mypy-extensions</code> Type system extensions for programs checked with the mypy type checker. <code>&gt;=0.4.3</code> <code>1.0.0</code> MIT License <code>packaging</code> Core utilities for Python packages <code>&gt;=22.0</code> <code>23.1</code> BSD License <code>paginate</code> Divides large result sets into pages for easier browsing <code>&gt;=0.5.6</code> <code>0.5.6</code> MIT <code>pathspec</code> Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0</code> <code>0.11.2</code> Mozilla Public License 2.0 (MPL 2.0) <code>pipdeptree</code> Command line utility to show dependency tree of packages. <code>&gt;=2.3</code> <code>2.12.0</code> MIT License <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=2</code> <code>3.10.0</code> MIT License <code>pluggy</code> plugin and hook calling mechanisms for python <code>&lt;2.0,&gt;=0.12</code> <code>1.2.0</code> MIT <code>ptyprocess</code> Run a subprocess in a pseudo terminal <code>~=0.6; sys_platform != \"win32\"</code> <code>0.7.0</code> ISC License (ISCL) <code>pygments</code> Pygments is a syntax highlighting package written in Python. <code>&gt;=2.14</code> <code>2.15.1</code> BSD-2-Clause <code>pymdown-extensions</code> Extension pack for Python Markdown. <code>&gt;=9</code> <code>10.1</code> MIT License <code>pyquery</code> A jquery-like library for python <code>&gt;=1.2</code> <code>2.0.0</code> BSD <code>pytest</code> pytest: simple powerful testing with Python <code>&gt;=6.2</code> <code>7.4.0</code> MIT <code>pytest-cov</code> Pytest plugin for measuring coverage. <code>&gt;=3.0</code> <code>4.1.0</code> MIT <code>pytest-randomly</code> Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.10</code> <code>3.13.0</code> MIT <code>pytest-xdist</code> pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=2.4</code> <code>3.3.1</code> MIT <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.8.2</code> Dual License <code>pytz</code> World timezone definitions, modern and historical <code>&gt;=2015.7; python_version &lt; \"3.9\"</code> <code>2023.3</code> ? <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.1</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>readtime</code> Calculates the time some text takes the average human to read, based on Medium's read time forumula <code>&gt;=2.0</code> <code>3.0.0</code> BSD <code>regex</code> Alternative regular expression module, to replace re. <code>&gt;=2022.4.24</code> <code>2023.6.3</code> Apache Software License <code>requests</code> Python HTTP for Humans. <code>2.31.0</code> Apache 2.0 <code>ruamel-yaml</code> ruamel.yaml is a YAML parser/emitter that supports roundtrip preservation of comments, seq/map flow style, and map key order <code>&gt;=0.17.21</code> <code>0.17.32</code> MIT license <code>ruamel-yaml-clib</code> C version of reader, parser and emitter for ruamel.yaml derived from libyaml <code>&gt;=0.2.7; platform_python_implementation == \"CPython\" and python_version &lt; \"3.12\"</code> <code>0.2.7</code> MIT <code>ruff</code> An extremely fast Python linter, written in Rust. <code>&gt;=0.0.246</code> <code>0.0.282</code> MIT <code>safety</code> Checks installed dependencies for known vulnerabilities and licenses. <code>&gt;=2</code> <code>2.3.4</code> MIT license <code>semver</code> Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.1</code> BSD <code>setuptools</code> Easily download, build, install, upgrade, and uninstall Python packages <code>&gt;=19.3</code> <code>68.0.0</code> MIT License <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>smmap</code> A pure Python implementation of a sliding window memory map manager <code>&lt;6,&gt;=3.0.1</code> <code>5.0.0</code> BSD <code>soupsieve</code> A modern CSS selector implementation for Beautiful Soup. <code>&gt;1.2</code> <code>2.4.1</code> MIT License <code>toml</code> Python Library for Tom's Obvious, Minimal Language <code>&gt;=0.10</code> <code>0.10.2</code> MIT <code>tomli</code> A lil' TOML parser <code>&gt;=1.1.0; python_version &lt; \"3.11\"</code> <code>2.0.1</code> ? <code>types-markdown</code> Typing stubs for Markdown <code>&gt;=3.3</code> <code>3.4.2.10</code> Apache-2.0 license <code>types-pyyaml</code> Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.11</code> Apache-2.0 license <code>types-toml</code> Typing stubs for toml <code>&gt;=0.10</code> <code>0.10.8.7</code> Apache-2.0 license <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.7+ <code>&gt;=3.10.0.0; python_version &lt; \"3.10\"</code> <code>4.7.1</code> Python Software Foundation License <code>urllib3</code> HTTP library with thread-safe connection pooling, file post, and more. <code>&lt;3,&gt;=1.21.1</code> <code>2.0.4</code> MIT License <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>3.0.0</code> Apache License 2.0 <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.16.2</code> ? <p>More credits from the author</p>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2019, Oleh Prypin\nCopyright (c) 2019, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"reference/mkdocs_autorefs/","title":"Index","text":""},{"location":"reference/mkdocs_autorefs/#mkdocs_autorefs","title":"mkdocs_autorefs","text":"<p>mkdocs-autorefs package.</p> <p>Automatically link across pages in MkDocs.</p>"},{"location":"reference/mkdocs_autorefs/plugin/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> plugin","text":""},{"location":"reference/mkdocs_autorefs/plugin/#mkdocs_autorefs.plugin","title":"plugin","text":"<p>This module contains the \"mkdocs-autorefs\" plugin.</p> <p>After each page is processed by the Markdown converter, this plugin stores absolute URLs of every HTML anchors it finds to later be able to fix unresolved references. It stores them during the <code>on_page_content</code> event hook.</p> <p>Just before writing the final HTML to the disc, during the <code>on_post_page</code> event hook, this plugin searches for references of the form <code>[identifier][]</code> or <code>[title][identifier]</code> that were not resolved, and fixes them using the previously stored identifier-URL mapping.</p>"},{"location":"reference/mkdocs_autorefs/plugin/#mkdocs_autorefs.plugin.AutorefsPlugin","title":"AutorefsPlugin","text":"<pre><code>AutorefsPlugin()\n</code></pre> <p>             Bases: <code>BasePlugin</code></p> <p>An <code>mkdocs</code> plugin.</p> <p>This plugin defines the following event hooks:</p> <ul> <li><code>on_config</code></li> <li><code>on_page_content</code></li> <li><code>on_post_page</code></li> </ul> <p>Check the Developing Plugins page of <code>mkdocs</code> for more information about its plugin system.</p> Source code in <code>src/mkdocs_autorefs/plugin.py</code> <pre><code>def __init__(self) -&gt; None:\n\"\"\"Initialize the object.\"\"\"\n    super().__init__()\n    self._url_map: dict[str, str] = {}\n    self._abs_url_map: dict[str, str] = {}\n    self.get_fallback_anchor: Callable[[str], str | None] | None = None\n</code></pre>"},{"location":"reference/mkdocs_autorefs/plugin/#mkdocs_autorefs.plugin.AutorefsPlugin.get_item_url","title":"get_item_url","text":"<pre><code>get_item_url(\n    identifier: str,\n    from_url: str | None = None,\n    fallback: Callable[[str], Sequence[str]] | None = None,\n) -&gt; str\n</code></pre> <p>Return a site-relative URL with anchor to the identifier, if it's present anywhere.</p> <p>Parameters:</p> <ul> <li> identifier             (<code>str</code>)         \u2013          <p>The anchor (without '#').</p> </li> <li> from_url             (<code>str | None</code>)         \u2013          <p>The URL of the base page, from which we link towards the targeted pages.</p> </li> <li> fallback             (<code>Callable[[str], Sequence[str]] | None</code>)         \u2013          <p>An optional function to suggest alternative anchors to try on failure.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>A site-relative URL.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/plugin.py</code> <pre><code>def get_item_url(\n    self,\n    identifier: str,\n    from_url: str | None = None,\n    fallback: Callable[[str], Sequence[str]] | None = None,\n) -&gt; str:\n\"\"\"Return a site-relative URL with anchor to the identifier, if it's present anywhere.\n\n    Arguments:\n        identifier: The anchor (without '#').\n        from_url: The URL of the base page, from which we link towards the targeted pages.\n        fallback: An optional function to suggest alternative anchors to try on failure.\n\n    Returns:\n        A site-relative URL.\n    \"\"\"\n    url = self._get_item_url(identifier, fallback)\n    if from_url is not None:\n        parsed = urlsplit(url)\n        if not parsed.scheme and not parsed.netloc:\n            return relative_url(from_url, url)\n    return url\n</code></pre>"},{"location":"reference/mkdocs_autorefs/plugin/#mkdocs_autorefs.plugin.AutorefsPlugin.map_urls","title":"map_urls","text":"<pre><code>map_urls(base_url: str, anchor: AnchorLink) -&gt; None\n</code></pre> <p>Recurse on every anchor to map its ID to its absolute URL.</p> <p>This method populates <code>self.url_map</code> by side-effect.</p> <p>Parameters:</p> <ul> <li> base_url             (<code>str</code>)         \u2013          <p>The base URL to use as a prefix for each anchor's relative URL.</p> </li> <li> anchor             (<code>AnchorLink</code>)         \u2013          <p>The anchor to process and to recurse on.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/plugin.py</code> <pre><code>def map_urls(self, base_url: str, anchor: AnchorLink) -&gt; None:\n\"\"\"Recurse on every anchor to map its ID to its absolute URL.\n\n    This method populates `self.url_map` by side-effect.\n\n    Arguments:\n        base_url: The base URL to use as a prefix for each anchor's relative URL.\n        anchor: The anchor to process and to recurse on.\n    \"\"\"\n    self.register_anchor(base_url, anchor.id)\n    for child in anchor.children:\n        self.map_urls(base_url, child)\n</code></pre>"},{"location":"reference/mkdocs_autorefs/plugin/#mkdocs_autorefs.plugin.AutorefsPlugin.on_config","title":"on_config","text":"<pre><code>on_config(config: MkDocsConfig) -&gt; MkDocsConfig | None\n</code></pre> <p>Instantiate our Markdown extension.</p> <p>Hook for the <code>on_config</code> event. In this hook, we instantiate our <code>AutorefsExtension</code> and add it to the list of Markdown extensions used by <code>mkdocs</code>.</p> <p>Parameters:</p> <ul> <li> config             (<code>MkDocsConfig</code>)         \u2013          <p>The MkDocs config object.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>MkDocsConfig | None</code>         \u2013          <p>The modified config.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/plugin.py</code> <pre><code>def on_config(self, config: MkDocsConfig) -&gt; MkDocsConfig | None:\n\"\"\"Instantiate our Markdown extension.\n\n    Hook for the [`on_config` event](https://www.mkdocs.org/user-guide/plugins/#on_config).\n    In this hook, we instantiate our [`AutorefsExtension`][mkdocs_autorefs.references.AutorefsExtension]\n    and add it to the list of Markdown extensions used by `mkdocs`.\n\n    Arguments:\n        config: The MkDocs config object.\n\n    Returns:\n        The modified config.\n    \"\"\"\n    log.debug(\"Adding AutorefsExtension to the list\")\n    config[\"markdown_extensions\"].append(AutorefsExtension())\n    return config\n</code></pre>"},{"location":"reference/mkdocs_autorefs/plugin/#mkdocs_autorefs.plugin.AutorefsPlugin.on_page_content","title":"on_page_content","text":"<pre><code>on_page_content(\n    html: str, page: Page, **kwargs: Any\n) -&gt; str\n</code></pre> <p>Map anchors to URLs.</p> <p>Hook for the <code>on_page_content</code> event. In this hook, we map the IDs of every anchor found in the table of contents to the anchors absolute URLs. This mapping will be used later to fix unresolved reference of the form <code>[title][identifier]</code> or <code>[identifier][]</code>.</p> <p>Parameters:</p> <ul> <li> html             (<code>str</code>)         \u2013          <p>HTML converted from Markdown.</p> </li> <li> page             (<code>Page</code>)         \u2013          <p>The related MkDocs page instance.</p> </li> <li> kwargs             (<code>Any</code>)         \u2013          <p>Additional arguments passed by MkDocs.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The same HTML. We only use this hook to map anchors to URLs.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/plugin.py</code> <pre><code>def on_page_content(self, html: str, page: Page, **kwargs: Any) -&gt; str:  # noqa: ARG002\n\"\"\"Map anchors to URLs.\n\n    Hook for the [`on_page_content` event](https://www.mkdocs.org/user-guide/plugins/#on_page_content).\n    In this hook, we map the IDs of every anchor found in the table of contents to the anchors absolute URLs.\n    This mapping will be used later to fix unresolved reference of the form `[title][identifier]` or\n    `[identifier][]`.\n\n    Arguments:\n        html: HTML converted from Markdown.\n        page: The related MkDocs page instance.\n        kwargs: Additional arguments passed by MkDocs.\n\n    Returns:\n        The same HTML. We only use this hook to map anchors to URLs.\n    \"\"\"\n    if self.scan_toc:\n        log.debug(f\"Mapping identifiers to URLs for page {page.file.src_path}\")\n        for item in page.toc.items:\n            self.map_urls(page.url, item)\n    return html\n</code></pre>"},{"location":"reference/mkdocs_autorefs/plugin/#mkdocs_autorefs.plugin.AutorefsPlugin.on_page_markdown","title":"on_page_markdown","text":"<pre><code>on_page_markdown(\n    markdown: str, page: Page, **kwargs: Any\n) -&gt; str\n</code></pre> <p>Remember which page is the current one.</p> <p>Parameters:</p> <ul> <li> markdown             (<code>str</code>)         \u2013          <p>Input Markdown.</p> </li> <li> page             (<code>Page</code>)         \u2013          <p>The related MkDocs page instance.</p> </li> <li> kwargs             (<code>Any</code>)         \u2013          <p>Additional arguments passed by MkDocs.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The same Markdown. We only use this hook to map anchors to URLs.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/plugin.py</code> <pre><code>def on_page_markdown(self, markdown: str, page: Page, **kwargs: Any) -&gt; str:  # noqa: ARG002\n\"\"\"Remember which page is the current one.\n\n    Arguments:\n        markdown: Input Markdown.\n        page: The related MkDocs page instance.\n        kwargs: Additional arguments passed by MkDocs.\n\n    Returns:\n        The same Markdown. We only use this hook to map anchors to URLs.\n    \"\"\"\n    self.current_page = page.url\n    return markdown\n</code></pre>"},{"location":"reference/mkdocs_autorefs/plugin/#mkdocs_autorefs.plugin.AutorefsPlugin.on_post_page","title":"on_post_page","text":"<pre><code>on_post_page(output: str, page: Page, **kwargs: Any) -&gt; str\n</code></pre> <p>Fix cross-references.</p> <p>Hook for the <code>on_post_page</code> event. In this hook, we try to fix unresolved references of the form <code>[title][identifier]</code> or <code>[identifier][]</code>. Doing that allows the user of <code>autorefs</code> to cross-reference objects in their documentation strings. It uses the native Markdown syntax so it's easy to remember and use.</p> <p>We log a warning for each reference that we couldn't map to an URL, but try to be smart and ignore identifiers that do not look legitimate (sometimes documentation can contain strings matching our <code>AUTO_REF_RE</code> regular expression that did not intend to reference anything). We currently ignore references when their identifier contains a space or a slash.</p> <p>Parameters:</p> <ul> <li> output             (<code>str</code>)         \u2013          <p>HTML converted from Markdown.</p> </li> <li> page             (<code>Page</code>)         \u2013          <p>The related MkDocs page instance.</p> </li> <li> kwargs             (<code>Any</code>)         \u2013          <p>Additional arguments passed by MkDocs.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>Modified HTML.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/plugin.py</code> <pre><code>def on_post_page(self, output: str, page: Page, **kwargs: Any) -&gt; str:  # noqa: ARG002\n\"\"\"Fix cross-references.\n\n    Hook for the [`on_post_page` event](https://www.mkdocs.org/user-guide/plugins/#on_post_page).\n    In this hook, we try to fix unresolved references of the form `[title][identifier]` or `[identifier][]`.\n    Doing that allows the user of `autorefs` to cross-reference objects in their documentation strings.\n    It uses the native Markdown syntax so it's easy to remember and use.\n\n    We log a warning for each reference that we couldn't map to an URL, but try to be smart and ignore identifiers\n    that do not look legitimate (sometimes documentation can contain strings matching\n    our [`AUTO_REF_RE`][mkdocs_autorefs.references.AUTO_REF_RE] regular expression that did not intend to reference anything).\n    We currently ignore references when their identifier contains a space or a slash.\n\n    Arguments:\n        output: HTML converted from Markdown.\n        page: The related MkDocs page instance.\n        kwargs: Additional arguments passed by MkDocs.\n\n    Returns:\n        Modified HTML.\n    \"\"\"\n    log.debug(f\"Fixing references in page {page.file.src_path}\")\n\n    url_mapper = functools.partial(self.get_item_url, from_url=page.url, fallback=self.get_fallback_anchor)\n    fixed_output, unmapped = fix_refs(output, url_mapper)\n\n    if unmapped and log.isEnabledFor(logging.WARNING):\n        for ref in unmapped:\n            log.warning(f\"{page.file.src_path}: Could not find cross-reference target '[{ref}]'\")\n\n    return fixed_output\n</code></pre>"},{"location":"reference/mkdocs_autorefs/plugin/#mkdocs_autorefs.plugin.AutorefsPlugin.register_anchor","title":"register_anchor","text":"<pre><code>register_anchor(page: str, identifier: str) -&gt; None\n</code></pre> <p>Register that an anchor corresponding to an identifier was encountered when rendering the page.</p> <p>Parameters:</p> <ul> <li> page             (<code>str</code>)         \u2013          <p>The relative URL of the current page. Examples: <code>'foo/bar/'</code>, <code>'foo/index.html'</code></p> </li> <li> identifier             (<code>str</code>)         \u2013          <p>The HTML anchor (without '#') as a string.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/plugin.py</code> <pre><code>def register_anchor(self, page: str, identifier: str) -&gt; None:\n\"\"\"Register that an anchor corresponding to an identifier was encountered when rendering the page.\n\n    Arguments:\n        page: The relative URL of the current page. Examples: `'foo/bar/'`, `'foo/index.html'`\n        identifier: The HTML anchor (without '#') as a string.\n    \"\"\"\n    self._url_map[identifier] = f\"{page}#{identifier}\"\n</code></pre>"},{"location":"reference/mkdocs_autorefs/plugin/#mkdocs_autorefs.plugin.AutorefsPlugin.register_url","title":"register_url","text":"<pre><code>register_url(identifier: str, url: str) -&gt; None\n</code></pre> <p>Register that the identifier should be turned into a link to this URL.</p> <p>Parameters:</p> <ul> <li> identifier             (<code>str</code>)         \u2013          <p>The new identifier.</p> </li> <li> url             (<code>str</code>)         \u2013          <p>The absolute URL (including anchor, if needed) where this item can be found.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/plugin.py</code> <pre><code>def register_url(self, identifier: str, url: str) -&gt; None:\n\"\"\"Register that the identifier should be turned into a link to this URL.\n\n    Arguments:\n        identifier: The new identifier.\n        url: The absolute URL (including anchor, if needed) where this item can be found.\n    \"\"\"\n    self._abs_url_map[identifier] = url\n</code></pre>"},{"location":"reference/mkdocs_autorefs/references/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> references","text":""},{"location":"reference/mkdocs_autorefs/references/#mkdocs_autorefs.references","title":"references","text":"<p>Cross-references module.</p>"},{"location":"reference/mkdocs_autorefs/references/#mkdocs_autorefs.references.AUTO_REF_RE","title":"AUTO_REF_RE  <code>module-attribute</code>","text":"<pre><code>AUTO_REF_RE = re.compile(\n    '&lt;span data-(?P&lt;kind&gt;autorefs-identifier|autorefs-optional|autorefs-optional-hover)=(\"?)(?P&lt;identifier&gt;[^\"&lt;&gt;]*)\\\\2&gt;(?P&lt;title&gt;.*?)&lt;/span&gt;'\n)\n</code></pre> <p>A regular expression to match mkdocs-autorefs' special reference markers in the <code>on_post_page</code> hook.</p>"},{"location":"reference/mkdocs_autorefs/references/#mkdocs_autorefs.references.AutoRefInlineProcessor","title":"AutoRefInlineProcessor","text":"<pre><code>AutoRefInlineProcessor(*args: Any, **kwargs: Any)\n</code></pre> <p>             Bases: <code>ReferenceInlineProcessor</code></p> <p>A Markdown extension.</p> Source code in <code>src/mkdocs_autorefs/references.py</code> <pre><code>def __init__(self, *args: Any, **kwargs: Any) -&gt; None:  # noqa: D107\n    super().__init__(REFERENCE_RE, *args, **kwargs)\n</code></pre>"},{"location":"reference/mkdocs_autorefs/references/#mkdocs_autorefs.references.AutoRefInlineProcessor.evalId","title":"evalId","text":"<pre><code>evalId(data: str, index: int, text: str) -&gt; EvalIDType\n</code></pre> <p>Evaluate the id portion of <code>[ref][id]</code>.</p> <p>If <code>[ref][]</code> use <code>[ref]</code>.</p> <p>Parameters:</p> <ul> <li> data             (<code>str</code>)         \u2013          <p>The data to evaluate.</p> </li> <li> index             (<code>int</code>)         \u2013          <p>The starting position.</p> </li> <li> text             (<code>str</code>)         \u2013          <p>The text to use when no identifier.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>EvalIDType</code>         \u2013          <p>A tuple containing the identifier, its end position, and whether it matched.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/references.py</code> <pre><code>def evalId(self, data: str, index: int, text: str) -&gt; EvalIDType:  # noqa: N802 (parent's casing)\n\"\"\"Evaluate the id portion of `[ref][id]`.\n\n    If `[ref][]` use `[ref]`.\n\n    Arguments:\n        data: The data to evaluate.\n        index: The starting position.\n        text: The text to use when no identifier.\n\n    Returns:\n        A tuple containing the identifier, its end position, and whether it matched.\n    \"\"\"\n    m = self.RE_LINK.match(data, pos=index)\n    if not m:\n        return None, index, False\n\n    identifier = m.group(1)\n    if not identifier:\n        identifier = text\n        # Allow the entire content to be one placeholder, with the intent of catching things like [`Foo`][].\n        # It doesn't catch [*Foo*][] though, just due to the priority order.\n        # https://github.com/Python-Markdown/markdown/blob/1858c1b601ead62ed49646ae0d99298f41b1a271/markdown/inlinepatterns.py#L78\n        if INLINE_PLACEHOLDER_RE.fullmatch(identifier):\n            identifier = self.unescape(identifier)\n\n    end = m.end(0)\n    return identifier, end, True\n</code></pre>"},{"location":"reference/mkdocs_autorefs/references/#mkdocs_autorefs.references.AutoRefInlineProcessor.handleMatch","title":"handleMatch","text":"<pre><code>handleMatch(\n    m: Match[str], data: Any\n) -&gt; Element | EvalIDType\n</code></pre> <p>Handle an element that matched.</p> <p>Parameters:</p> <ul> <li> m             (<code>Match[str]</code>)         \u2013          <p>The match object.</p> </li> <li> data             (<code>Any</code>)         \u2013          <p>The matched data.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Element | EvalIDType</code>         \u2013          <p>A new element or a tuple.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/references.py</code> <pre><code>def handleMatch(self, m: Match[str], data: Any) -&gt; Element | EvalIDType:  # type: ignore[override]  # noqa: N802\n\"\"\"Handle an element that matched.\n\n    Arguments:\n        m: The match object.\n        data: The matched data.\n\n    Returns:\n        A new element or a tuple.\n    \"\"\"\n    text, index, handled = self.getText(data, m.end(0))\n    if not handled:\n        return None, None, None\n\n    identifier, end, handled = self.evalId(data, index, text)\n    if not handled:\n        return None, None, None\n\n    if re.search(r\"[/ \\x00-\\x1f]\", identifier):\n        # Do nothing if the matched reference contains:\n        # - a space, slash or control character (considered unintended);\n        # - specifically \\x01 is used by Python-Markdown HTML stash when there's inline formatting,\n        #   but references with Markdown formatting are not possible anyway.\n        return None, m.start(0), end\n\n    return self.makeTag(identifier, text), m.start(0), end\n</code></pre>"},{"location":"reference/mkdocs_autorefs/references/#mkdocs_autorefs.references.AutoRefInlineProcessor.makeTag","title":"makeTag","text":"<pre><code>makeTag(identifier: str, text: str) -&gt; Element\n</code></pre> <p>Create a tag that can be matched by <code>AUTO_REF_RE</code>.</p> <p>Parameters:</p> <ul> <li> identifier             (<code>str</code>)         \u2013          <p>The identifier to use in the HTML property.</p> </li> <li> text             (<code>str</code>)         \u2013          <p>The text to use in the HTML tag.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Element</code>         \u2013          <p>A new element.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/references.py</code> <pre><code>def makeTag(self, identifier: str, text: str) -&gt; Element:  # type: ignore[override]  # noqa: N802\n\"\"\"Create a tag that can be matched by `AUTO_REF_RE`.\n\n    Arguments:\n        identifier: The identifier to use in the HTML property.\n        text: The text to use in the HTML tag.\n\n    Returns:\n        A new element.\n    \"\"\"\n    el = Element(\"span\")\n    el.set(\"data-autorefs-identifier\", identifier)\n    el.text = text\n    return el\n</code></pre>"},{"location":"reference/mkdocs_autorefs/references/#mkdocs_autorefs.references.AutorefsExtension","title":"AutorefsExtension","text":"<p>             Bases: <code>Extension</code></p> <p>Extension that inserts auto-references in Markdown.</p>"},{"location":"reference/mkdocs_autorefs/references/#mkdocs_autorefs.references.AutorefsExtension.extendMarkdown","title":"extendMarkdown","text":"<pre><code>extendMarkdown(md: Markdown) -&gt; None\n</code></pre> <p>Register the extension.</p> <p>Add an instance of our <code>AutoRefInlineProcessor</code> to the Markdown parser.</p> <p>Parameters:</p> <ul> <li> md             (<code>Markdown</code>)         \u2013          <p>A <code>markdown.Markdown</code> instance.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/references.py</code> <pre><code>def extendMarkdown(self, md: Markdown) -&gt; None:  # noqa: N802 (casing: parent method's name)\n\"\"\"Register the extension.\n\n    Add an instance of our [`AutoRefInlineProcessor`][mkdocs_autorefs.references.AutoRefInlineProcessor] to the Markdown parser.\n\n    Arguments:\n        md: A `markdown.Markdown` instance.\n    \"\"\"\n    md.inlinePatterns.register(\n        AutoRefInlineProcessor(md),\n        \"mkdocs-autorefs\",\n        priority=168,  # Right after markdown.inlinepatterns.ReferenceInlineProcessor\n    )\n</code></pre>"},{"location":"reference/mkdocs_autorefs/references/#mkdocs_autorefs.references.fix_ref","title":"fix_ref","text":"<pre><code>fix_ref(\n    url_mapper: Callable[[str], str], unmapped: list[str]\n) -&gt; Callable\n</code></pre> <p>Return a <code>repl</code> function for <code>re.sub</code>.</p> <p>In our context, we match Markdown references and replace them with HTML links.</p> <p>When the matched reference's identifier was not mapped to an URL, we append the identifier to the outer <code>unmapped</code> list. It generally means the user is trying to cross-reference an object that was not collected and rendered, making it impossible to link to it. We catch this exception in the caller to issue a warning.</p> <p>Parameters:</p> <ul> <li> url_mapper             (<code>Callable[[str], str]</code>)         \u2013          <p>A callable that gets an object's site URL by its identifier, such as mkdocs_autorefs.plugin.AutorefsPlugin.get_item_url.</p> </li> <li> unmapped             (<code>list[str]</code>)         \u2013          <p>A list to store unmapped identifiers.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Callable</code>         \u2013          <p>The actual function accepting a <code>Match</code> object</p> </li> <li> <code>Callable</code>         \u2013          <p>and returning the replacement strings.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/references.py</code> <pre><code>def fix_ref(url_mapper: Callable[[str], str], unmapped: list[str]) -&gt; Callable:\n\"\"\"Return a `repl` function for [`re.sub`](https://docs.python.org/3/library/re.html#re.sub).\n\n    In our context, we match Markdown references and replace them with HTML links.\n\n    When the matched reference's identifier was not mapped to an URL, we append the identifier to the outer\n    `unmapped` list. It generally means the user is trying to cross-reference an object that was not collected\n    and rendered, making it impossible to link to it. We catch this exception in the caller to issue a warning.\n\n    Arguments:\n        url_mapper: A callable that gets an object's site URL by its identifier,\n            such as [mkdocs_autorefs.plugin.AutorefsPlugin.get_item_url][].\n        unmapped: A list to store unmapped identifiers.\n\n    Returns:\n        The actual function accepting a [`Match` object](https://docs.python.org/3/library/re.html#match-objects)\n        and returning the replacement strings.\n    \"\"\"\n\n    def inner(match: Match) -&gt; str:\n        identifier = match[\"identifier\"]\n        title = match[\"title\"]\n        kind = match[\"kind\"]\n\n        try:\n            url = url_mapper(unescape(identifier))\n        except KeyError:\n            if kind == \"autorefs-optional\":\n                return title\n            if kind == \"autorefs-optional-hover\":\n                return f'&lt;span title=\"{identifier}\"&gt;{title}&lt;/span&gt;'\n            unmapped.append(identifier)\n            if title == identifier:\n                return f\"[{identifier}][]\"\n            return f\"[{title}][{identifier}]\"\n\n        parsed = urlsplit(url)\n        external = parsed.scheme or parsed.netloc\n        classes = [\"autorefs\", \"autorefs-external\" if external else \"autorefs-internal\"]\n        class_attr = \" \".join(classes)\n        if kind == \"autorefs-optional-hover\":\n            return f'&lt;a class=\"{class_attr}\" title=\"{identifier}\" href=\"{escape(url)}\"&gt;{title}&lt;/a&gt;'\n        return f'&lt;a class=\"{class_attr}\" href=\"{escape(url)}\"&gt;{title}&lt;/a&gt;'\n\n    return inner\n</code></pre>"},{"location":"reference/mkdocs_autorefs/references/#mkdocs_autorefs.references.fix_refs","title":"fix_refs","text":"<pre><code>fix_refs(\n    html: str, url_mapper: Callable[[str], str]\n) -&gt; tuple[str, list[str]]\n</code></pre> <p>Fix all references in the given HTML text.</p> <p>Parameters:</p> <ul> <li> html             (<code>str</code>)         \u2013          <p>The text to fix.</p> </li> <li> url_mapper             (<code>Callable[[str], str]</code>)         \u2013          <p>A callable that gets an object's site URL by its identifier, such as mkdocs_autorefs.plugin.AutorefsPlugin.get_item_url.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[str, list[str]]</code>         \u2013          <p>The fixed HTML.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/references.py</code> <pre><code>def fix_refs(html: str, url_mapper: Callable[[str], str]) -&gt; tuple[str, list[str]]:\n\"\"\"Fix all references in the given HTML text.\n\n    Arguments:\n        html: The text to fix.\n        url_mapper: A callable that gets an object's site URL by its identifier,\n            such as [mkdocs_autorefs.plugin.AutorefsPlugin.get_item_url][].\n\n    Returns:\n        The fixed HTML.\n    \"\"\"\n    unmapped: list[str] = []\n    html = AUTO_REF_RE.sub(fix_ref(url_mapper, unmapped), html)\n    return html, unmapped\n</code></pre>"},{"location":"reference/mkdocs_autorefs/references/#mkdocs_autorefs.references.relative_url","title":"relative_url","text":"<pre><code>relative_url(url_a: str, url_b: str) -&gt; str\n</code></pre> <p>Compute the relative path from URL A to URL B.</p> <p>Parameters:</p> <ul> <li> url_a             (<code>str</code>)         \u2013          <p>URL A.</p> </li> <li> url_b             (<code>str</code>)         \u2013          <p>URL B.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The relative URL to go from A to B.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/references.py</code> <pre><code>def relative_url(url_a: str, url_b: str) -&gt; str:\n\"\"\"Compute the relative path from URL A to URL B.\n\n    Arguments:\n        url_a: URL A.\n        url_b: URL B.\n\n    Returns:\n        The relative URL to go from A to B.\n    \"\"\"\n    parts_a = url_a.split(\"/\")\n    url_b, anchor = url_b.split(\"#\", 1)\n    parts_b = url_b.split(\"/\")\n\n    # remove common left parts\n    while parts_a and parts_b and parts_a[0] == parts_b[0]:\n        parts_a.pop(0)\n        parts_b.pop(0)\n\n    # go up as many times as remaining a parts' depth\n    levels = len(parts_a) - 1\n    parts_relative = [\"..\"] * levels + parts_b\n    relative = \"/\".join(parts_relative)\n    return f\"{relative}#{anchor}\"\n</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}